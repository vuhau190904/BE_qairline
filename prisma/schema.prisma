generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model aircrafts {
  aircraft_id       Int       @id @default(autoincrement())
  manufacturer      String    @db.VarChar(100)
  model             String    @db.VarChar(50)
  capacity          Int
  economy_seats     Int
  business_seats    Int
  first_class_seats Int
  flights           flights[]
}

model airports {
  airport_id                                  Int       @id @default(autoincrement())
  name                                        String    @db.VarChar(100)
  location                                    String    @db.VarChar(100)
  country                                     String    @db.VarChar(50)
  iata_code                                   String    @unique @db.Char(3)
  flights_flights_arrival_airportToairports   flights[] @relation("flights_arrival_airportToairports")
  flights_flights_departure_airportToairports flights[] @relation("flights_departure_airportToairports")
}

model audit_logs {
  log_id    Int       @id @default(autoincrement())
  admin_id  Int
  action    String    @db.VarChar(200)
  timestamp DateTime? @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model customers {
  customer_id      Int            @id @default(autoincrement())
  name             String         @db.VarChar(100)
  email            String         @unique @db.VarChar(100)
  password_hash    String         @db.VarChar(255)
  phone            String?        @db.VarChar(20)
  membership_level String?        @default("Standard") @db.VarChar(10)
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  updated_at       DateTime?      @default(now()) @db.Timestamp(6)
  reservations     reservations[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model flight_stats {
  stat_id       Int       @id @default(autoincrement())
  flight_id     Int
  total_tickets Int?      @default(0)
  total_revenue Decimal?  @default(0.00) @db.Decimal(15, 2)
  last_updated  DateTime? @default(now()) @db.Timestamp(6)
  flights       flights   @relation(fields: [flight_id], references: [flight_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model flights {
  flight_id                                    Int                @id @default(autoincrement())
  aircraft_id                                  Int
  departure_airport                            Int
  arrival_airport                              Int
  departure_time                               DateTime           @db.Timestamp(6)
  arrival_time                                 DateTime           @db.Timestamp(6)
  flight_status                                String?            @default("Scheduled") @db.VarChar(10)
  base_price                                   Decimal            @db.Decimal(10, 2)
  delay_reason                                 String?
  updated_departure_time                       DateTime?          @db.Timestamp(6)
  created_at                                   DateTime?          @default(now()) @db.Timestamp(6)
  flight_stats                                 flight_stats[]
  aircrafts                                    aircrafts          @relation(fields: [aircraft_id], references: [aircraft_id], onDelete: Cascade, onUpdate: NoAction)
  airports_flights_arrival_airportToairports   airports           @relation("flights_arrival_airportToairports", fields: [arrival_airport], references: [airport_id], onDelete: Cascade, onUpdate: NoAction)
  airports_flights_departure_airportToairports airports           @relation("flights_departure_airportToairports", fields: [departure_airport], references: [airport_id], onDelete: Cascade, onUpdate: NoAction)
  promotions                                   promotions[]
  reservations                                 reservations[]
  seat_assignments                             seat_assignments[]

  @@index([arrival_airport, arrival_time], map: "idx_flights_arrival")
  @@index([departure_airport, departure_time], map: "idx_flights_departure")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model news {
  news_id    Int       @id @default(autoincrement())
  title      String    @db.VarChar(200)
  content    String
  category   String?   @default("Announcement") @db.VarChar(20)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model promotions {
  promotion_id  Int      @id @default(autoincrement())
  title         String   @db.VarChar(100)
  description   String?
  discount_rate Decimal  @db.Decimal(5, 2)
  start_date    DateTime @db.Date
  end_date      DateTime @db.Date
  flight_id     Int?
  flights       flights? @relation(fields: [flight_id], references: [flight_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reservations {
  reservation_id Int       @id @default(autoincrement())
  customer_id    Int
  flight_id      Int
  booking_date   DateTime? @default(now()) @db.Timestamp(6)
  cancel_by_date DateTime? @db.Timestamp(6)
  status         String?   @default("Confirmed") @db.VarChar(10)
  customers      customers @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade, onUpdate: NoAction)
  flights        flights   @relation(fields: [flight_id], references: [flight_id], onDelete: Cascade, onUpdate: NoAction)
  tickets        tickets[]

  @@index([customer_id], map: "idx_reservations_customer")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model seat_assignments {
  assignment_id Int     @id @default(autoincrement())
  flight_id     Int
  seat_number   String  @db.VarChar(10)
  class         String  @db.VarChar(10)
  seat_type     String? @db.VarChar(10)
  status        String? @default("Available") @db.VarChar(10)
  flights       flights @relation(fields: [flight_id], references: [flight_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([flight_id, status], map: "idx_seat_assignments_flight")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model tickets {
  ticket_id      Int          @id @default(autoincrement())
  reservation_id Int
  seat_number    String       @db.VarChar(10)
  class          String       @db.VarChar(10)
  price          Decimal      @db.Decimal(10, 2)
  status         String?      @default("Active") @db.VarChar(10)
  reservations   reservations @relation(fields: [reservation_id], references: [reservation_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([reservation_id], map: "idx_tickets_reservation")
}
